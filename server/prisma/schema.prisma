// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts     Account[]
  categories   Category[]
  transactions Transaction[]
  budgets      Budget[]

  @@map("users")
}

model Account {
  id          String   @id @default(cuid())
  name        String
  type        String   // checking, savings, credit, cash
  balance     Float    @default(0)
  currency    String   @default("USD")
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  transactions Transaction[]

  @@map("accounts")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  type        String   // income, expense
  color       String   @default("#3B82F6")
  icon        String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  transactions Transaction[]
  budgets     Budget[]

  @@map("categories")
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  type        String   // income, expense
  description String
  date        DateTime
  accountId   String
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("transactions")
}

model Budget {
  id          String   @id @default(cuid())
  amount      Float
  period      String   // monthly, yearly
  startDate   DateTime
  endDate     DateTime
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("budgets")
}
